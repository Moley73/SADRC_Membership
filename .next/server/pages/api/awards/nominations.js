"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/awards/nominations";
exports.ids = ["pages/api/awards/nominations"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fnominations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Cnominations.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fnominations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Cnominations.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_awards_nominations_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\awards\\nominations.js */ \"(api)/./pages/api/awards/nominations.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_awards_nominations_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_awards_nominations_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/awards/nominations\",\n        pathname: \"/api/awards/nominations\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_awards_nominations_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmF3YXJkcyUyRm5vbWluYXRpb25zJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNhd2FyZHMlNUNub21pbmF0aW9ucy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNpRTtBQUNqRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNkRBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDZEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NhZHJjLW1lbWJlcnNoaXAtYXBwLz82MDJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcYXdhcmRzXFxcXG5vbWluYXRpb25zLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXdhcmRzL25vbWluYXRpb25zXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXdhcmRzL25vbWluYXRpb25zXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fnominations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Cnominations.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/awardsService.js":
/*!******************************!*\
  !*** ./lib/awardsService.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AwardsService: () => (/* binding */ AwardsService),\n/* harmony export */   createStoredProcedures: () => (/* binding */ createStoredProcedures),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\n// Create a Supabase client with the service role key for admin operations\n// This bypasses RLS policies and should only be used server-side\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://wylflyzcsmkckzjdvsqc.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY);\n/**\n * Awards System Service\n * Handles all operations related to the awards system\n */ const AwardsService = {\n    /**\n   * Get the current settings for the awards system\n   */ getSettings: async ()=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_settings\").select(\"*\").single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching award settings:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Update the awards system settings\n   * @param {Object} settings - The settings to update\n   */ updateSettings: async (settings)=>{\n        try {\n            // Create a sanitized copy of the settings object\n            const sanitizedSettings = {\n                ...settings\n            };\n            // Validate and format date fields\n            const dateFields = [\n                \"nomination_start_date\",\n                \"nomination_end_date\",\n                \"voting_start_date\",\n                \"voting_end_date\"\n            ];\n            for (const field of dateFields){\n                if (sanitizedSettings[field]) {\n                    try {\n                        // Ensure date is in valid format\n                        const date = new Date(sanitizedSettings[field]);\n                        if (isNaN(date.getTime())) {\n                            throw new Error(`Invalid date format for ${field}`);\n                        }\n                        // Keep the ISO string format\n                        sanitizedSettings[field] = date.toISOString();\n                    } catch (err) {\n                        console.error(`Error formatting ${field}:`, err);\n                        throw new Error(`Invalid date format for ${field}: ${err.message}`);\n                    }\n                }\n            }\n            // Ensure active_year is an integer\n            if (sanitizedSettings.active_year) {\n                sanitizedSettings.active_year = parseInt(sanitizedSettings.active_year, 10);\n                if (isNaN(sanitizedSettings.active_year)) {\n                    throw new Error(\"Active year must be a valid number\");\n                }\n            }\n            console.log(\"Updating award settings with sanitized data:\", JSON.stringify(sanitizedSettings, null, 2));\n            const { data, error } = await supabaseAdmin.from(\"award_settings\").update(sanitizedSettings).eq(\"id\", sanitizedSettings.id).select().single();\n            if (error) {\n                console.error(\"Supabase error updating settings:\", error);\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error updating award settings:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Change the current phase of the awards system\n   * @param {string} phase - The new phase (inactive, nomination, voting, completed)\n   * @param {string} settingsId - The ID of the settings record\n   */ changePhase: async (phase, settingsId)=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_settings\").update({\n                current_phase: phase,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", settingsId).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error changing award phase:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get all award categories\n   */ getCategories: async ()=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_categories\").select(\"*\").order(\"name\");\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching award categories:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Create a nomination\n   * @param {Object} nomination - The nomination details\n   */ createNomination: async (nomination)=>{\n        try {\n            // Get current settings to ensure we're in nomination phase\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"*\").single();\n            if (settingsError) throw settingsError;\n            if (settings.current_phase !== \"nomination\") {\n                throw new Error(\"Nominations are not currently open\");\n            }\n            // Create the nomination\n            const { data, error } = await supabaseAdmin.from(\"award_nominations\").insert({\n                ...nomination,\n                status: \"pending\",\n                award_year: settings.active_year\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error creating nomination:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get nominations for a specific category\n   * @param {string} categoryId - The category ID\n   * @param {string} status - Filter by status (optional)\n   */ getNominations: async (categoryId, status = null)=>{\n        try {\n            let query = supabaseAdmin.from(\"award_nominations\").select(`\n          *,\n          category:award_categories(name, description)\n        `).eq(\"category_id\", categoryId);\n            // Add status filter if provided\n            if (status) {\n                query = query.eq(\"status\", status);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching nominations:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get all nominations\n   * @param {string} status - Filter by status (optional)\n   */ getAllNominations: async (status = null)=>{\n        try {\n            let query = supabaseAdmin.from(\"award_nominations\").select(`\n          *,\n          category:award_categories(name, description)\n        `);\n            // Add status filter if provided\n            if (status) {\n                query = query.eq(\"status\", status);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching all nominations:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Update a nomination's status\n   * @param {string} nominationId - The nomination ID\n   * @param {string} status - The new status (pending, approved, rejected)\n   */ updateNominationStatus: async (nominationId, status)=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_nominations\").update({\n                status,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", nominationId).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error updating nomination status:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Cast a vote for a nomination\n   * @param {string} nominationId - The nomination ID\n   * @param {string} voterEmail - The voter's email\n   */ castVote: async (nominationId, voterEmail)=>{\n        try {\n            // Get current settings to ensure we're in voting phase\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"*\").single();\n            if (settingsError) throw settingsError;\n            if (settings.current_phase !== \"voting\") {\n                throw new Error(\"Voting is not currently open\");\n            }\n            // Get the nomination to check if it's approved\n            const { data: nomination, error: nominationError } = await supabaseAdmin.from(\"award_nominations\").select(\"*\").eq(\"id\", nominationId).single();\n            if (nominationError) throw nominationError;\n            if (nomination.status !== \"approved\") {\n                throw new Error(\"Cannot vote for a nomination that is not approved\");\n            }\n            // Check if user has already voted in this category\n            const { data: existingVotes, error: existingVotesError } = await supabaseAdmin.from(\"award_votes\").select(\"id\").eq(\"voter_email\", voterEmail).eq(\"award_year\", settings.active_year);\n            if (existingVotesError) throw existingVotesError;\n            // If user has already voted in this category, throw an error\n            if (existingVotes.length > 0) {\n                const { data: existingNominations, error: existingNominationsError } = await supabaseAdmin.from(\"award_nominations\").select(\"category_id\").in(\"id\", existingVotes.map((vote)=>vote.nomination_id));\n                if (existingNominationsError) throw existingNominationsError;\n                if (existingNominations.some((nom)=>nom.category_id === nomination.category_id)) {\n                    throw new Error(\"You have already voted in this category\");\n                }\n            }\n            // Cast the vote\n            const { data, error } = await supabaseAdmin.from(\"award_votes\").insert({\n                nomination_id: nominationId,\n                voter_email: voterEmail,\n                award_year: settings.active_year\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error casting vote:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get vote counts for nominations\n   * @param {string} categoryId - The category ID (optional)\n   */ getVoteCounts: async (categoryId = null)=>{\n        try {\n            // Get the current settings to get the active year\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"active_year\").single();\n            if (settingsError) throw settingsError;\n            // Build the query to get vote counts\n            let query = supabaseAdmin.rpc(\"get_vote_counts\", {\n                active_year: settings.active_year\n            });\n            if (categoryId) {\n                query = query.eq(\"category_id\", categoryId);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error getting vote counts:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get voting statistics\n   */ getVotingStats: async ()=>{\n        try {\n            // Get the current settings to get the active year\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"active_year\").single();\n            if (settingsError) throw settingsError;\n            // Get total votes per category\n            const { data, error } = await supabaseAdmin.rpc(\"get_voting_stats\", {\n                active_year: settings.active_year\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error getting voting stats:\", error);\n            throw error;\n        }\n    }\n};\n// Create stored procedures for vote counting and stats\nconst createStoredProcedures = async ()=>{\n    try {\n        // Create function to get vote counts\n        await supabaseAdmin.rpc(\"create_get_vote_counts_function\", {\n            sql: `\n        CREATE OR REPLACE FUNCTION get_vote_counts(active_year INTEGER)\n        RETURNS TABLE (\n          nomination_id UUID,\n          category_id UUID,\n          nominee_email TEXT,\n          category_name TEXT,\n          vote_count BIGINT\n        )\n        LANGUAGE SQL\n        AS $$\n          SELECT \n            n.id AS nomination_id,\n            n.category_id,\n            n.nominee_email,\n            c.name AS category_name,\n            COUNT(v.id) AS vote_count\n          FROM award_nominations n\n          JOIN award_categories c ON n.category_id = c.id\n          LEFT JOIN award_votes v ON n.id = v.nomination_id\n          WHERE n.status = 'approved'\n          AND n.award_year = active_year\n          GROUP BY n.id, n.category_id, n.nominee_email, c.name\n          ORDER BY c.name, vote_count DESC;\n        $$;\n      `\n        });\n        // Create function to get voting stats\n        await supabaseAdmin.rpc(\"create_get_voting_stats_function\", {\n            sql: `\n        CREATE OR REPLACE FUNCTION get_voting_stats(active_year INTEGER)\n        RETURNS TABLE (\n          category_id UUID,\n          category_name TEXT,\n          total_votes BIGINT,\n          total_nominations BIGINT,\n          approved_nominations BIGINT\n        )\n        LANGUAGE SQL\n        AS $$\n          SELECT \n            c.id AS category_id,\n            c.name AS category_name,\n            COUNT(v.id) AS total_votes,\n            COUNT(DISTINCT n.id) AS total_nominations,\n            COUNT(DISTINCT CASE WHEN n.status = 'approved' THEN n.id END) AS approved_nominations\n          FROM award_categories c\n          LEFT JOIN award_nominations n ON c.id = n.category_id AND n.award_year = active_year\n          LEFT JOIN award_votes v ON n.id = v.nomination_id AND v.award_year = active_year\n          GROUP BY c.id, c.name\n          ORDER BY c.name;\n        $$;\n      `\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error creating stored procedures:\", error);\n        return false;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AwardsService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQVFKLEtBQUssQ0FBQyxxQ0FBcUNBO1FBQ25ELE9BQU87SUFDVDtBQUNGLEVBQUU7QUFFRixpRUFBZUgsYUFBYUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhZHJjLW1lbWJlcnNoaXAtYXBwLy4vbGliL2F3YXJkc1NlcnZpY2UuanM/YmExNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG4vLyBDcmVhdGUgYSBTdXBhYmFzZSBjbGllbnQgd2l0aCB0aGUgc2VydmljZSByb2xlIGtleSBmb3IgYWRtaW4gb3BlcmF0aW9uc1xuLy8gVGhpcyBieXBhc3NlcyBSTFMgcG9saWNpZXMgYW5kIHNob3VsZCBvbmx5IGJlIHVzZWQgc2VydmVyLXNpZGVcbmNvbnN0IHN1cGFiYXNlQWRtaW4gPSBjcmVhdGVDbGllbnQoXG4gIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCxcbiAgcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWVxuKTtcblxuLyoqXG4gKiBBd2FyZHMgU3lzdGVtIFNlcnZpY2VcbiAqIEhhbmRsZXMgYWxsIG9wZXJhdGlvbnMgcmVsYXRlZCB0byB0aGUgYXdhcmRzIHN5c3RlbVxuICovXG5leHBvcnQgY29uc3QgQXdhcmRzU2VydmljZSA9IHtcbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBzZXR0aW5ncyBmb3IgdGhlIGF3YXJkcyBzeXN0ZW1cbiAgICovXG4gIGdldFNldHRpbmdzOiBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2F3YXJkX3NldHRpbmdzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5zaW5nbGUoKTtcbiAgICAgICAgXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGF3YXJkIHNldHRpbmdzOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGF3YXJkcyBzeXN0ZW0gc2V0dGluZ3NcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdzIC0gVGhlIHNldHRpbmdzIHRvIHVwZGF0ZVxuICAgKi9cbiAgdXBkYXRlU2V0dGluZ3M6IGFzeW5jIChzZXR0aW5ncykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDcmVhdGUgYSBzYW5pdGl6ZWQgY29weSBvZiB0aGUgc2V0dGluZ3Mgb2JqZWN0XG4gICAgICBjb25zdCBzYW5pdGl6ZWRTZXR0aW5ncyA9IHsgLi4uc2V0dGluZ3MgfTtcbiAgICAgIFxuICAgICAgLy8gVmFsaWRhdGUgYW5kIGZvcm1hdCBkYXRlIGZpZWxkc1xuICAgICAgY29uc3QgZGF0ZUZpZWxkcyA9IFsnbm9taW5hdGlvbl9zdGFydF9kYXRlJywgJ25vbWluYXRpb25fZW5kX2RhdGUnLCAndm90aW5nX3N0YXJ0X2RhdGUnLCAndm90aW5nX2VuZF9kYXRlJ107XG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgZGF0ZUZpZWxkcykge1xuICAgICAgICBpZiAoc2FuaXRpemVkU2V0dGluZ3NbZmllbGRdKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBkYXRlIGlzIGluIHZhbGlkIGZvcm1hdFxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHNhbml0aXplZFNldHRpbmdzW2ZpZWxkXSk7XG4gICAgICAgICAgICBpZiAoaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBkYXRlIGZvcm1hdCBmb3IgJHtmaWVsZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEtlZXAgdGhlIElTTyBzdHJpbmcgZm9ybWF0XG4gICAgICAgICAgICBzYW5pdGl6ZWRTZXR0aW5nc1tmaWVsZF0gPSBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmb3JtYXR0aW5nICR7ZmllbGR9OmAsIGVycik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGF0ZSBmb3JtYXQgZm9yICR7ZmllbGR9OiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBFbnN1cmUgYWN0aXZlX3llYXIgaXMgYW4gaW50ZWdlclxuICAgICAgaWYgKHNhbml0aXplZFNldHRpbmdzLmFjdGl2ZV95ZWFyKSB7XG4gICAgICAgIHNhbml0aXplZFNldHRpbmdzLmFjdGl2ZV95ZWFyID0gcGFyc2VJbnQoc2FuaXRpemVkU2V0dGluZ3MuYWN0aXZlX3llYXIsIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKHNhbml0aXplZFNldHRpbmdzLmFjdGl2ZV95ZWFyKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aXZlIHllYXIgbXVzdCBiZSBhIHZhbGlkIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyBhd2FyZCBzZXR0aW5ncyB3aXRoIHNhbml0aXplZCBkYXRhOicsIEpTT04uc3RyaW5naWZ5KHNhbml0aXplZFNldHRpbmdzLCBudWxsLCAyKSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2F3YXJkX3NldHRpbmdzJylcbiAgICAgICAgLnVwZGF0ZShzYW5pdGl6ZWRTZXR0aW5ncylcbiAgICAgICAgLmVxKCdpZCcsIHNhbml0aXplZFNldHRpbmdzLmlkKVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTdXBhYmFzZSBlcnJvciB1cGRhdGluZyBzZXR0aW5nczonLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgYXdhcmQgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgY3VycmVudCBwaGFzZSBvZiB0aGUgYXdhcmRzIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGhhc2UgLSBUaGUgbmV3IHBoYXNlIChpbmFjdGl2ZSwgbm9taW5hdGlvbiwgdm90aW5nLCBjb21wbGV0ZWQpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZXR0aW5nc0lkIC0gVGhlIElEIG9mIHRoZSBzZXR0aW5ncyByZWNvcmRcbiAgICovXG4gIGNoYW5nZVBoYXNlOiBhc3luYyAocGhhc2UsIHNldHRpbmdzSWQpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAuZnJvbSgnYXdhcmRfc2V0dGluZ3MnKVxuICAgICAgICAudXBkYXRlKHsgXG4gICAgICAgICAgY3VycmVudF9waGFzZTogcGhhc2UsXG4gICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pXG4gICAgICAgIC5lcSgnaWQnLCBzZXR0aW5nc0lkKVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hhbmdpbmcgYXdhcmQgcGhhc2U6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLyoqXG4gICAqIEdldCBhbGwgYXdhcmQgY2F0ZWdvcmllc1xuICAgKi9cbiAgZ2V0Q2F0ZWdvcmllczogYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAgIC5mcm9tKCdhd2FyZF9jYXRlZ29yaWVzJylcbiAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgIC5vcmRlcignbmFtZScpO1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgYXdhcmQgY2F0ZWdvcmllczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICAvKipcbiAgICogQ3JlYXRlIGEgbm9taW5hdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gbm9taW5hdGlvbiAtIFRoZSBub21pbmF0aW9uIGRldGFpbHNcbiAgICovXG4gIGNyZWF0ZU5vbWluYXRpb246IGFzeW5jIChub21pbmF0aW9uKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBjdXJyZW50IHNldHRpbmdzIHRvIGVuc3VyZSB3ZSdyZSBpbiBub21pbmF0aW9uIHBoYXNlXG4gICAgICBjb25zdCB7IGRhdGE6IHNldHRpbmdzLCBlcnJvcjogc2V0dGluZ3NFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAuZnJvbSgnYXdhcmRfc2V0dGluZ3MnKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChzZXR0aW5nc0Vycm9yKSB0aHJvdyBzZXR0aW5nc0Vycm9yO1xuICAgICAgXG4gICAgICBpZiAoc2V0dGluZ3MuY3VycmVudF9waGFzZSAhPT0gJ25vbWluYXRpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm9taW5hdGlvbnMgYXJlIG5vdCBjdXJyZW50bHkgb3BlbicpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDcmVhdGUgdGhlIG5vbWluYXRpb25cbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2F3YXJkX25vbWluYXRpb25zJylcbiAgICAgICAgLmluc2VydCh7XG4gICAgICAgICAgLi4ubm9taW5hdGlvbixcbiAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgICAgICBhd2FyZF95ZWFyOiBzZXR0aW5ncy5hY3RpdmVfeWVhclxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgbm9taW5hdGlvbjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICAvKipcbiAgICogR2V0IG5vbWluYXRpb25zIGZvciBhIHNwZWNpZmljIGNhdGVnb3J5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeUlkIC0gVGhlIGNhdGVnb3J5IElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgLSBGaWx0ZXIgYnkgc3RhdHVzIChvcHRpb25hbClcbiAgICovXG4gIGdldE5vbWluYXRpb25zOiBhc3luYyAoY2F0ZWdvcnlJZCwgc3RhdHVzID0gbnVsbCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgcXVlcnkgPSBzdXBhYmFzZUFkbWluXG4gICAgICAgIC5mcm9tKCdhd2FyZF9ub21pbmF0aW9ucycpXG4gICAgICAgIC5zZWxlY3QoYFxuICAgICAgICAgICosXG4gICAgICAgICAgY2F0ZWdvcnk6YXdhcmRfY2F0ZWdvcmllcyhuYW1lLCBkZXNjcmlwdGlvbilcbiAgICAgICAgYClcbiAgICAgICAgLmVxKCdjYXRlZ29yeV9pZCcsIGNhdGVnb3J5SWQpO1xuICAgICAgICBcbiAgICAgIC8vIEFkZCBzdGF0dXMgZmlsdGVyIGlmIHByb3ZpZGVkXG4gICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuZXEoJ3N0YXR1cycsIHN0YXR1cyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHF1ZXJ5O1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbm9taW5hdGlvbnM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLyoqXG4gICAqIEdldCBhbGwgbm9taW5hdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cyAtIEZpbHRlciBieSBzdGF0dXMgKG9wdGlvbmFsKVxuICAgKi9cbiAgZ2V0QWxsTm9taW5hdGlvbnM6IGFzeW5jIChzdGF0dXMgPSBudWxsKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2F3YXJkX25vbWluYXRpb25zJylcbiAgICAgICAgLnNlbGVjdChgXG4gICAgICAgICAgKixcbiAgICAgICAgICBjYXRlZ29yeTphd2FyZF9jYXRlZ29yaWVzKG5hbWUsIGRlc2NyaXB0aW9uKVxuICAgICAgICBgKTtcbiAgICAgICAgXG4gICAgICAvLyBBZGQgc3RhdHVzIGZpbHRlciBpZiBwcm92aWRlZFxuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmVxKCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBxdWVyeTtcbiAgICAgICAgXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFsbCBub21pbmF0aW9uczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG4gIFxuICAvKipcbiAgICogVXBkYXRlIGEgbm9taW5hdGlvbidzIHN0YXR1c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbm9taW5hdGlvbklkIC0gVGhlIG5vbWluYXRpb24gSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cyAtIFRoZSBuZXcgc3RhdHVzIChwZW5kaW5nLCBhcHByb3ZlZCwgcmVqZWN0ZWQpXG4gICAqL1xuICB1cGRhdGVOb21pbmF0aW9uU3RhdHVzOiBhc3luYyAobm9taW5hdGlvbklkLCBzdGF0dXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAuZnJvbSgnYXdhcmRfbm9taW5hdGlvbnMnKVxuICAgICAgICAudXBkYXRlKHsgXG4gICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ2lkJywgbm9taW5hdGlvbklkKVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgbm9taW5hdGlvbiBzdGF0dXM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLyoqXG4gICAqIENhc3QgYSB2b3RlIGZvciBhIG5vbWluYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5vbWluYXRpb25JZCAtIFRoZSBub21pbmF0aW9uIElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2b3RlckVtYWlsIC0gVGhlIHZvdGVyJ3MgZW1haWxcbiAgICovXG4gIGNhc3RWb3RlOiBhc3luYyAobm9taW5hdGlvbklkLCB2b3RlckVtYWlsKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBjdXJyZW50IHNldHRpbmdzIHRvIGVuc3VyZSB3ZSdyZSBpbiB2b3RpbmcgcGhhc2VcbiAgICAgIGNvbnN0IHsgZGF0YTogc2V0dGluZ3MsIGVycm9yOiBzZXR0aW5nc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAgIC5mcm9tKCdhd2FyZF9zZXR0aW5ncycpXG4gICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAuc2luZ2xlKCk7XG4gICAgICAgIFxuICAgICAgaWYgKHNldHRpbmdzRXJyb3IpIHRocm93IHNldHRpbmdzRXJyb3I7XG4gICAgICBcbiAgICAgIGlmIChzZXR0aW5ncy5jdXJyZW50X3BoYXNlICE9PSAndm90aW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZvdGluZyBpcyBub3QgY3VycmVudGx5IG9wZW4nKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gR2V0IHRoZSBub21pbmF0aW9uIHRvIGNoZWNrIGlmIGl0J3MgYXBwcm92ZWRcbiAgICAgIGNvbnN0IHsgZGF0YTogbm9taW5hdGlvbiwgZXJyb3I6IG5vbWluYXRpb25FcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAuZnJvbSgnYXdhcmRfbm9taW5hdGlvbnMnKVxuICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgLmVxKCdpZCcsIG5vbWluYXRpb25JZClcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChub21pbmF0aW9uRXJyb3IpIHRocm93IG5vbWluYXRpb25FcnJvcjtcbiAgICAgIFxuICAgICAgaWYgKG5vbWluYXRpb24uc3RhdHVzICE9PSAnYXBwcm92ZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHZvdGUgZm9yIGEgbm9taW5hdGlvbiB0aGF0IGlzIG5vdCBhcHByb3ZlZCcpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGhhcyBhbHJlYWR5IHZvdGVkIGluIHRoaXMgY2F0ZWdvcnlcbiAgICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmdWb3RlcywgZXJyb3I6IGV4aXN0aW5nVm90ZXNFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAuZnJvbSgnYXdhcmRfdm90ZXMnKVxuICAgICAgICAuc2VsZWN0KCdpZCcpXG4gICAgICAgIC5lcSgndm90ZXJfZW1haWwnLCB2b3RlckVtYWlsKVxuICAgICAgICAuZXEoJ2F3YXJkX3llYXInLCBzZXR0aW5ncy5hY3RpdmVfeWVhcik7XG4gICAgICAgIFxuICAgICAgaWYgKGV4aXN0aW5nVm90ZXNFcnJvcikgdGhyb3cgZXhpc3RpbmdWb3Rlc0Vycm9yO1xuICAgICAgXG4gICAgICAvLyBJZiB1c2VyIGhhcyBhbHJlYWR5IHZvdGVkIGluIHRoaXMgY2F0ZWdvcnksIHRocm93IGFuIGVycm9yXG4gICAgICBpZiAoZXhpc3RpbmdWb3Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmdOb21pbmF0aW9ucywgZXJyb3I6IGV4aXN0aW5nTm9taW5hdGlvbnNFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pblxuICAgICAgICAgIC5mcm9tKCdhd2FyZF9ub21pbmF0aW9ucycpXG4gICAgICAgICAgLnNlbGVjdCgnY2F0ZWdvcnlfaWQnKVxuICAgICAgICAgIC5pbignaWQnLCBleGlzdGluZ1ZvdGVzLm1hcCh2b3RlID0+IHZvdGUubm9taW5hdGlvbl9pZCkpO1xuICAgICAgICAgIFxuICAgICAgICBpZiAoZXhpc3RpbmdOb21pbmF0aW9uc0Vycm9yKSB0aHJvdyBleGlzdGluZ05vbWluYXRpb25zRXJyb3I7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXhpc3RpbmdOb21pbmF0aW9ucy5zb21lKG5vbSA9PiBub20uY2F0ZWdvcnlfaWQgPT09IG5vbWluYXRpb24uY2F0ZWdvcnlfaWQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgaGF2ZSBhbHJlYWR5IHZvdGVkIGluIHRoaXMgY2F0ZWdvcnknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDYXN0IHRoZSB2b3RlXG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAgIC5mcm9tKCdhd2FyZF92b3RlcycpXG4gICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgIG5vbWluYXRpb25faWQ6IG5vbWluYXRpb25JZCxcbiAgICAgICAgICB2b3Rlcl9lbWFpbDogdm90ZXJFbWFpbCxcbiAgICAgICAgICBhd2FyZF95ZWFyOiBzZXR0aW5ncy5hY3RpdmVfeWVhclxuICAgICAgICB9KVxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FzdGluZyB2b3RlOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcbiAgXG4gIC8qKlxuICAgKiBHZXQgdm90ZSBjb3VudHMgZm9yIG5vbWluYXRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeUlkIC0gVGhlIGNhdGVnb3J5IElEIChvcHRpb25hbClcbiAgICovXG4gIGdldFZvdGVDb3VudHM6IGFzeW5jIChjYXRlZ29yeUlkID0gbnVsbCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc2V0dGluZ3MgdG8gZ2V0IHRoZSBhY3RpdmUgeWVhclxuICAgICAgY29uc3QgeyBkYXRhOiBzZXR0aW5ncywgZXJyb3I6IHNldHRpbmdzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlQWRtaW5cbiAgICAgICAgLmZyb20oJ2F3YXJkX3NldHRpbmdzJylcbiAgICAgICAgLnNlbGVjdCgnYWN0aXZlX3llYXInKVxuICAgICAgICAuc2luZ2xlKCk7XG4gICAgICAgIFxuICAgICAgaWYgKHNldHRpbmdzRXJyb3IpIHRocm93IHNldHRpbmdzRXJyb3I7XG4gICAgICBcbiAgICAgIC8vIEJ1aWxkIHRoZSBxdWVyeSB0byBnZXQgdm90ZSBjb3VudHNcbiAgICAgIGxldCBxdWVyeSA9IHN1cGFiYXNlQWRtaW4ucnBjKCdnZXRfdm90ZV9jb3VudHMnLCB7XG4gICAgICAgIGFjdGl2ZV95ZWFyOiBzZXR0aW5ncy5hY3RpdmVfeWVhclxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmIChjYXRlZ29yeUlkKSB7XG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuZXEoJ2NhdGVnb3J5X2lkJywgY2F0ZWdvcnlJZCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHF1ZXJ5O1xuICAgICAgXG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgdm90ZSBjb3VudHM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLyoqXG4gICAqIEdldCB2b3Rpbmcgc3RhdGlzdGljc1xuICAgKi9cbiAgZ2V0Vm90aW5nU3RhdHM6IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHNldHRpbmdzIHRvIGdldCB0aGUgYWN0aXZlIHllYXJcbiAgICAgIGNvbnN0IHsgZGF0YTogc2V0dGluZ3MsIGVycm9yOiBzZXR0aW5nc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluXG4gICAgICAgIC5mcm9tKCdhd2FyZF9zZXR0aW5ncycpXG4gICAgICAgIC5zZWxlY3QoJ2FjdGl2ZV95ZWFyJylcbiAgICAgICAgLnNpbmdsZSgpO1xuICAgICAgICBcbiAgICAgIGlmIChzZXR0aW5nc0Vycm9yKSB0aHJvdyBzZXR0aW5nc0Vycm9yO1xuICAgICAgXG4gICAgICAvLyBHZXQgdG90YWwgdm90ZXMgcGVyIGNhdGVnb3J5XG4gICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZUFkbWluLnJwYygnZ2V0X3ZvdGluZ19zdGF0cycsIHtcbiAgICAgICAgYWN0aXZlX3llYXI6IHNldHRpbmdzLmFjdGl2ZV95ZWFyXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHZvdGluZyBzdGF0czonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn07XG5cbi8vIENyZWF0ZSBzdG9yZWQgcHJvY2VkdXJlcyBmb3Igdm90ZSBjb3VudGluZyBhbmQgc3RhdHNcbmV4cG9ydCBjb25zdCBjcmVhdGVTdG9yZWRQcm9jZWR1cmVzID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIC8vIENyZWF0ZSBmdW5jdGlvbiB0byBnZXQgdm90ZSBjb3VudHNcbiAgICBhd2FpdCBzdXBhYmFzZUFkbWluLnJwYygnY3JlYXRlX2dldF92b3RlX2NvdW50c19mdW5jdGlvbicsIHtcbiAgICAgIHNxbDogYFxuICAgICAgICBDUkVBVEUgT1IgUkVQTEFDRSBGVU5DVElPTiBnZXRfdm90ZV9jb3VudHMoYWN0aXZlX3llYXIgSU5URUdFUilcbiAgICAgICAgUkVUVVJOUyBUQUJMRSAoXG4gICAgICAgICAgbm9taW5hdGlvbl9pZCBVVUlELFxuICAgICAgICAgIGNhdGVnb3J5X2lkIFVVSUQsXG4gICAgICAgICAgbm9taW5lZV9lbWFpbCBURVhULFxuICAgICAgICAgIGNhdGVnb3J5X25hbWUgVEVYVCxcbiAgICAgICAgICB2b3RlX2NvdW50IEJJR0lOVFxuICAgICAgICApXG4gICAgICAgIExBTkdVQUdFIFNRTFxuICAgICAgICBBUyAkJFxuICAgICAgICAgIFNFTEVDVCBcbiAgICAgICAgICAgIG4uaWQgQVMgbm9taW5hdGlvbl9pZCxcbiAgICAgICAgICAgIG4uY2F0ZWdvcnlfaWQsXG4gICAgICAgICAgICBuLm5vbWluZWVfZW1haWwsXG4gICAgICAgICAgICBjLm5hbWUgQVMgY2F0ZWdvcnlfbmFtZSxcbiAgICAgICAgICAgIENPVU5UKHYuaWQpIEFTIHZvdGVfY291bnRcbiAgICAgICAgICBGUk9NIGF3YXJkX25vbWluYXRpb25zIG5cbiAgICAgICAgICBKT0lOIGF3YXJkX2NhdGVnb3JpZXMgYyBPTiBuLmNhdGVnb3J5X2lkID0gYy5pZFxuICAgICAgICAgIExFRlQgSk9JTiBhd2FyZF92b3RlcyB2IE9OIG4uaWQgPSB2Lm5vbWluYXRpb25faWRcbiAgICAgICAgICBXSEVSRSBuLnN0YXR1cyA9ICdhcHByb3ZlZCdcbiAgICAgICAgICBBTkQgbi5hd2FyZF95ZWFyID0gYWN0aXZlX3llYXJcbiAgICAgICAgICBHUk9VUCBCWSBuLmlkLCBuLmNhdGVnb3J5X2lkLCBuLm5vbWluZWVfZW1haWwsIGMubmFtZVxuICAgICAgICAgIE9SREVSIEJZIGMubmFtZSwgdm90ZV9jb3VudCBERVNDO1xuICAgICAgICAkJDtcbiAgICAgIGBcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgZnVuY3Rpb24gdG8gZ2V0IHZvdGluZyBzdGF0c1xuICAgIGF3YWl0IHN1cGFiYXNlQWRtaW4ucnBjKCdjcmVhdGVfZ2V0X3ZvdGluZ19zdGF0c19mdW5jdGlvbicsIHtcbiAgICAgIHNxbDogYFxuICAgICAgICBDUkVBVEUgT1IgUkVQTEFDRSBGVU5DVElPTiBnZXRfdm90aW5nX3N0YXRzKGFjdGl2ZV95ZWFyIElOVEVHRVIpXG4gICAgICAgIFJFVFVSTlMgVEFCTEUgKFxuICAgICAgICAgIGNhdGVnb3J5X2lkIFVVSUQsXG4gICAgICAgICAgY2F0ZWdvcnlfbmFtZSBURVhULFxuICAgICAgICAgIHRvdGFsX3ZvdGVzIEJJR0lOVCxcbiAgICAgICAgICB0b3RhbF9ub21pbmF0aW9ucyBCSUdJTlQsXG4gICAgICAgICAgYXBwcm92ZWRfbm9taW5hdGlvbnMgQklHSU5UXG4gICAgICAgIClcbiAgICAgICAgTEFOR1VBR0UgU1FMXG4gICAgICAgIEFTICQkXG4gICAgICAgICAgU0VMRUNUIFxuICAgICAgICAgICAgYy5pZCBBUyBjYXRlZ29yeV9pZCxcbiAgICAgICAgICAgIGMubmFtZSBBUyBjYXRlZ29yeV9uYW1lLFxuICAgICAgICAgICAgQ09VTlQodi5pZCkgQVMgdG90YWxfdm90ZXMsXG4gICAgICAgICAgICBDT1VOVChESVNUSU5DVCBuLmlkKSBBUyB0b3RhbF9ub21pbmF0aW9ucyxcbiAgICAgICAgICAgIENPVU5UKERJU1RJTkNUIENBU0UgV0hFTiBuLnN0YXR1cyA9ICdhcHByb3ZlZCcgVEhFTiBuLmlkIEVORCkgQVMgYXBwcm92ZWRfbm9taW5hdGlvbnNcbiAgICAgICAgICBGUk9NIGF3YXJkX2NhdGVnb3JpZXMgY1xuICAgICAgICAgIExFRlQgSk9JTiBhd2FyZF9ub21pbmF0aW9ucyBuIE9OIGMuaWQgPSBuLmNhdGVnb3J5X2lkIEFORCBuLmF3YXJkX3llYXIgPSBhY3RpdmVfeWVhclxuICAgICAgICAgIExFRlQgSk9JTiBhd2FyZF92b3RlcyB2IE9OIG4uaWQgPSB2Lm5vbWluYXRpb25faWQgQU5EIHYuYXdhcmRfeWVhciA9IGFjdGl2ZV95ZWFyXG4gICAgICAgICAgR1JPVVAgQlkgYy5pZCwgYy5uYW1lXG4gICAgICAgICAgT1JERVIgQlkgYy5uYW1lO1xuICAgICAgICAkJDtcbiAgICAgIGBcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBzdG9yZWQgcHJvY2VkdXJlczonLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBd2FyZHNTZXJ2aWNlO1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlQWRtaW4iLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsIkF3YXJkc1NlcnZpY2UiLCJnZXRTZXR0aW5ncyIsImRhdGEiLCJlcnJvciIsImZyb20iLCJzZWxlY3QiLCJzaW5nbGUiLCJjb25zb2xlIiwidXBkYXRlU2V0dGluZ3MiLCJzZXR0aW5ncyIsInNhbml0aXplZFNldHRpbmdzIiwiZGF0ZUZpZWxkcyIsImZpZWxkIiwiZGF0ZSIsIkRhdGUiLCJpc05hTiIsImdldFRpbWUiLCJFcnJvciIsInRvSVNPU3RyaW5nIiwiZXJyIiwibWVzc2FnZSIsImFjdGl2ZV95ZWFyIiwicGFyc2VJbnQiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwidXBkYXRlIiwiZXEiLCJpZCIsImNoYW5nZVBoYXNlIiwicGhhc2UiLCJzZXR0aW5nc0lkIiwiY3VycmVudF9waGFzZSIsInVwZGF0ZWRfYXQiLCJnZXRDYXRlZ29yaWVzIiwib3JkZXIiLCJjcmVhdGVOb21pbmF0aW9uIiwibm9taW5hdGlvbiIsInNldHRpbmdzRXJyb3IiLCJpbnNlcnQiLCJzdGF0dXMiLCJhd2FyZF95ZWFyIiwiZ2V0Tm9taW5hdGlvbnMiLCJjYXRlZ29yeUlkIiwicXVlcnkiLCJnZXRBbGxOb21pbmF0aW9ucyIsInVwZGF0ZU5vbWluYXRpb25TdGF0dXMiLCJub21pbmF0aW9uSWQiLCJjYXN0Vm90ZSIsInZvdGVyRW1haWwiLCJub21pbmF0aW9uRXJyb3IiLCJleGlzdGluZ1ZvdGVzIiwiZXhpc3RpbmdWb3Rlc0Vycm9yIiwibGVuZ3RoIiwiZXhpc3RpbmdOb21pbmF0aW9ucyIsImV4aXN0aW5nTm9taW5hdGlvbnNFcnJvciIsImluIiwibWFwIiwidm90ZSIsIm5vbWluYXRpb25faWQiLCJzb21lIiwibm9tIiwiY2F0ZWdvcnlfaWQiLCJ2b3Rlcl9lbWFpbCIsImdldFZvdGVDb3VudHMiLCJycGMiLCJnZXRWb3RpbmdTdGF0cyIsImNyZWF0ZVN0b3JlZFByb2NlZHVyZXMiLCJzcWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/awardsService.js\n");

/***/ }),

/***/ "(api)/./lib/supabaseClient.js":
/*!*******************************!*\
  !*** ./lib/supabaseClient.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthToken: () => (/* binding */ getAuthToken),\n/* harmony export */   isAdmin: () => (/* binding */ isAdmin),\n/* harmony export */   isLoggedIn: () => (/* binding */ isLoggedIn),\n/* harmony export */   refreshSession: () => (/* binding */ refreshSession),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   withServiceRole: () => (/* binding */ withServiceRole)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst supabaseUrl = \"https://wylflyzcsmkckzjdvsqc.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind5bGZseXpjc21rY2t6amR2c3FjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTMzNDgsImV4cCI6MjA2MDI4OTM0OH0.9y6kBuwd1emWuseV6tv9BgtmSgB8a9UUb15n0n6UL0w\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Create a standard client with the user's session\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true\n    }\n});\n// Create a service role client for admin operations\nconst supabaseAdmin = supabaseServiceKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n}) : null;\n// Helper function to get the current session token\nconst getAuthToken = async ()=>{\n    try {\n        const { data } = await supabase.auth.getSession();\n        return data?.session?.access_token || null;\n    } catch (error) {\n        console.error(\"Error getting auth token:\", error);\n        return null;\n    }\n};\n// Helper function to check if user is logged in\nconst isLoggedIn = async ()=>{\n    try {\n        const { data } = await supabase.auth.getSession();\n        return !!data?.session;\n    } catch (error) {\n        console.error(\"Error checking login status:\", error);\n        return false;\n    }\n};\n// Helper function to check if user is admin\nconst isAdmin = async ()=>{\n    try {\n        const { data: sessionData } = await supabase.auth.getSession();\n        if (!sessionData?.session) return false;\n        const { data } = await supabase.from(\"admin_list\").select(\"role\").eq(\"email\", sessionData.session.user.email).maybeSingle();\n        return !!data;\n    } catch (error) {\n        console.error(\"Error checking admin status:\", error);\n        return false;\n    }\n};\n// Force a session refresh\nconst refreshSession = async ()=>{\n    try {\n        const { data, error } = await supabase.auth.refreshSession();\n        if (error) throw error;\n        return data?.session;\n    } catch (error) {\n        console.error(\"Error refreshing session:\", error);\n        return null;\n    }\n};\n// Helper function to safely use the admin client\nconst withServiceRole = async (operation)=>{\n    if (!supabaseAdmin) {\n        console.error(\"Service role key not available. Falling back to regular client.\");\n        return operation(supabase);\n    }\n    try {\n        return await operation(supabaseAdmin);\n    } catch (error) {\n        console.error(\"Error using service role client:\", error);\n        // Fallback to regular client if service role fails\n        return operation(supabase);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvc3VwYWJhc2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXFEO0FBRXJELE1BQU1DLGNBQWNDLDBDQUFvQztBQUN4RCxNQUFNRyxrQkFBa0JILGtOQUF5QztBQUNqRSxNQUFNSyxxQkFBcUJMLFFBQVFDLEdBQUcsQ0FBQ0sseUJBQXlCO0FBRWhFLG1EQUFtRDtBQUM1QyxNQUFNQyxXQUFXVCxtRUFBWUEsQ0FBQ0MsYUFBYUksaUJBQWlCO0lBQ2pFSyxNQUFNO1FBQ0pDLGdCQUFnQjtRQUNoQkMsa0JBQWtCO1FBQ2xCQyxvQkFBb0I7SUFDdEI7QUFDRixHQUFHO0FBRUgsb0RBQW9EO0FBQzdDLE1BQU1DLGdCQUFnQlAscUJBQ3pCUCxtRUFBWUEsQ0FBQ0MsYUFBYU0sb0JBQW9CO0lBQzVDRyxNQUFNO1FBQ0pFLGtCQUFrQjtRQUNsQkQsZ0JBQWdCO0lBQ2xCO0FBQ0YsS0FDQSxLQUFLO0FBRVQsbURBQW1EO0FBQzVDLE1BQU1JLGVBQWU7SUFDMUIsSUFBSTtRQUNGLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTVAsU0FBU0MsSUFBSSxDQUFDTyxVQUFVO1FBQy9DLE9BQU9ELE1BQU1FLFNBQVNDLGdCQUFnQjtJQUN4QyxFQUFFLE9BQU9DLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDZCQUE2QkE7UUFDM0MsT0FBTztJQUNUO0FBQ0YsRUFBRTtBQUVGLGdEQUFnRDtBQUN6QyxNQUFNRSxhQUFhO0lBQ3hCLElBQUk7UUFDRixNQUFNLEVBQUVOLElBQUksRUFBRSxHQUFHLE1BQU1QLFNBQVNDLElBQUksQ0FBQ08sVUFBVTtRQUMvQyxPQUFPLENBQUMsQ0FBQ0QsTUFBTUU7SUFDakIsRUFBRSxPQUFPRSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE9BQU87SUFDVDtBQUNGLEVBQUU7QUFFRiw0Q0FBNEM7QUFDckMsTUFBTUcsVUFBVTtJQUNyQixJQUFJO1FBQ0YsTUFBTSxFQUFFUCxNQUFNUSxXQUFXLEVBQUUsR0FBRyxNQUFNZixTQUFTQyxJQUFJLENBQUNPLFVBQVU7UUFDNUQsSUFBSSxDQUFDTyxhQUFhTixTQUFTLE9BQU87UUFFbEMsTUFBTSxFQUFFRixJQUFJLEVBQUUsR0FBRyxNQUFNUCxTQUNwQmdCLElBQUksQ0FBQyxjQUNMQyxNQUFNLENBQUMsUUFDUEMsRUFBRSxDQUFDLFNBQVNILFlBQVlOLE9BQU8sQ0FBQ1UsSUFBSSxDQUFDQyxLQUFLLEVBQzFDQyxXQUFXO1FBRWQsT0FBTyxDQUFDLENBQUNkO0lBQ1gsRUFBRSxPQUFPSSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE9BQU87SUFDVDtBQUNGLEVBQUU7QUFFRiwwQkFBMEI7QUFDbkIsTUFBTVcsaUJBQWlCO0lBQzVCLElBQUk7UUFDRixNQUFNLEVBQUVmLElBQUksRUFBRUksS0FBSyxFQUFFLEdBQUcsTUFBTVgsU0FBU0MsSUFBSSxDQUFDcUIsY0FBYztRQUMxRCxJQUFJWCxPQUFPLE1BQU1BO1FBQ2pCLE9BQU9KLE1BQU1FO0lBQ2YsRUFBRSxPQUFPRSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE9BQU87SUFDVDtBQUNGLEVBQUU7QUFFRixpREFBaUQ7QUFDMUMsTUFBTVksa0JBQWtCLE9BQU9DO0lBQ3BDLElBQUksQ0FBQ25CLGVBQWU7UUFDbEJPLFFBQVFELEtBQUssQ0FBQztRQUNkLE9BQU9hLFVBQVV4QjtJQUNuQjtJQUVBLElBQUk7UUFDRixPQUFPLE1BQU13QixVQUFVbkI7SUFDekIsRUFBRSxPQUFPTSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELG1EQUFtRDtRQUNuRCxPQUFPYSxVQUFVeEI7SUFDbkI7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FkcmMtbWVtYmVyc2hpcC1hcHAvLi9saWIvc3VwYWJhc2VDbGllbnQuanM/NWYwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTDtcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZO1xuY29uc3Qgc3VwYWJhc2VTZXJ2aWNlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWTtcblxuLy8gQ3JlYXRlIGEgc3RhbmRhcmQgY2xpZW50IHdpdGggdGhlIHVzZXIncyBzZXNzaW9uXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSwge1xuICBhdXRoOiB7XG4gICAgcGVyc2lzdFNlc3Npb246IHRydWUsXG4gICAgYXV0b1JlZnJlc2hUb2tlbjogdHJ1ZSxcbiAgICBkZXRlY3RTZXNzaW9uSW5Vcmw6IHRydWVcbiAgfVxufSk7XG5cbi8vIENyZWF0ZSBhIHNlcnZpY2Ugcm9sZSBjbGllbnQgZm9yIGFkbWluIG9wZXJhdGlvbnNcbmV4cG9ydCBjb25zdCBzdXBhYmFzZUFkbWluID0gc3VwYWJhc2VTZXJ2aWNlS2V5IFxuICA/IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VTZXJ2aWNlS2V5LCB7XG4gICAgICBhdXRoOiB7XG4gICAgICAgIGF1dG9SZWZyZXNoVG9rZW46IGZhbHNlLFxuICAgICAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICA6IG51bGw7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGN1cnJlbnQgc2Vzc2lvbiB0b2tlblxuZXhwb3J0IGNvbnN0IGdldEF1dGhUb2tlbiA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIHJldHVybiBkYXRhPy5zZXNzaW9uPy5hY2Nlc3NfdG9rZW4gfHwgbnVsbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGF1dGggdG9rZW46JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdXNlciBpcyBsb2dnZWQgaW5cbmV4cG9ydCBjb25zdCBpc0xvZ2dlZEluID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uKCk7XG4gICAgcmV0dXJuICEhZGF0YT8uc2Vzc2lvbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBsb2dpbiBzdGF0dXM6JywgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHVzZXIgaXMgYWRtaW5cbmV4cG9ydCBjb25zdCBpc0FkbWluID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGF0YTogc2Vzc2lvbkRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpO1xuICAgIGlmICghc2Vzc2lvbkRhdGE/LnNlc3Npb24pIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnYWRtaW5fbGlzdCcpXG4gICAgICAuc2VsZWN0KCdyb2xlJylcbiAgICAgIC5lcSgnZW1haWwnLCBzZXNzaW9uRGF0YS5zZXNzaW9uLnVzZXIuZW1haWwpXG4gICAgICAubWF5YmVTaW5nbGUoKTtcbiAgICAgIFxuICAgIHJldHVybiAhIWRhdGE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgYWRtaW4gc3RhdHVzOicsIGVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIEZvcmNlIGEgc2Vzc2lvbiByZWZyZXNoXG5leHBvcnQgY29uc3QgcmVmcmVzaFNlc3Npb24gPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5yZWZyZXNoU2Vzc2lvbigpO1xuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgcmV0dXJuIGRhdGE/LnNlc3Npb247XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVmcmVzaGluZyBzZXNzaW9uOicsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNhZmVseSB1c2UgdGhlIGFkbWluIGNsaWVudFxuZXhwb3J0IGNvbnN0IHdpdGhTZXJ2aWNlUm9sZSA9IGFzeW5jIChvcGVyYXRpb24pID0+IHtcbiAgaWYgKCFzdXBhYmFzZUFkbWluKSB7XG4gICAgY29uc29sZS5lcnJvcignU2VydmljZSByb2xlIGtleSBub3QgYXZhaWxhYmxlLiBGYWxsaW5nIGJhY2sgdG8gcmVndWxhciBjbGllbnQuJyk7XG4gICAgcmV0dXJuIG9wZXJhdGlvbihzdXBhYmFzZSk7XG4gIH1cbiAgXG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IG9wZXJhdGlvbihzdXBhYmFzZUFkbWluKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1c2luZyBzZXJ2aWNlIHJvbGUgY2xpZW50OicsIGVycm9yKTtcbiAgICAvLyBGYWxsYmFjayB0byByZWd1bGFyIGNsaWVudCBpZiBzZXJ2aWNlIHJvbGUgZmFpbHNcbiAgICByZXR1cm4gb3BlcmF0aW9uKHN1cGFiYXNlKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsInN1cGFiYXNlU2VydmljZUtleSIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiLCJzdXBhYmFzZSIsImF1dGgiLCJwZXJzaXN0U2Vzc2lvbiIsImF1dG9SZWZyZXNoVG9rZW4iLCJkZXRlY3RTZXNzaW9uSW5VcmwiLCJzdXBhYmFzZUFkbWluIiwiZ2V0QXV0aFRva2VuIiwiZGF0YSIsImdldFNlc3Npb24iLCJzZXNzaW9uIiwiYWNjZXNzX3Rva2VuIiwiZXJyb3IiLCJjb25zb2xlIiwiaXNMb2dnZWRJbiIsImlzQWRtaW4iLCJzZXNzaW9uRGF0YSIsImZyb20iLCJzZWxlY3QiLCJlcSIsInVzZXIiLCJlbWFpbCIsIm1heWJlU2luZ2xlIiwicmVmcmVzaFNlc3Npb24iLCJ3aXRoU2VydmljZVJvbGUiLCJvcGVyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/supabaseClient.js\n");

/***/ }),

/***/ "(api)/./pages/api/awards/nominations.js":
/*!*****************************************!*\
  !*** ./pages/api/awards/nominations.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_awardsService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/awardsService */ \"(api)/./lib/awardsService.js\");\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/supabaseClient */ \"(api)/./lib/supabaseClient.js\");\n\n\n\nasync function handler(req, res) {\n    try {\n        // Create a Supabase client for server-side authentication with explicit env variables\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://wylflyzcsmkckzjdvsqc.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind5bGZseXpjc21rY2t6amR2c3FjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTMzNDgsImV4cCI6MjA2MDI4OTM0OH0.9y6kBuwd1emWuseV6tv9BgtmSgB8a9UUb15n0n6UL0w\", {\n            auth: {\n                persistSession: true,\n                autoRefreshToken: true,\n                detectSessionInUrl: true\n            }\n        });\n        // Log the Supabase URL being used to verify environment variables are loaded\n        console.log(\"Using Supabase URL:\", \"https://wylflyzcsmkckzjdvsqc.supabase.co\");\n        // Get the auth cookie from the request\n        const authCookie = req.cookies[\"sb-access-token\"] || req.cookies[\"sb:token\"] || req.cookies[\"supabase-auth-token\"];\n        if (!authCookie) {\n            console.error(\"No auth cookie found in request\");\n        } else {\n            console.log(\"Auth cookie found:\", authCookie.substring(0, 10) + \"...\");\n        }\n        // Check if user is authenticated\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        console.log(\"Session check result:\", session ? \"Session found\" : \"No session found\", \"Error:\", sessionError);\n        if (sessionError) {\n            console.error(\"Auth error:\", sessionError);\n            return res.status(401).json({\n                error: \"Authentication error\"\n            });\n        }\n        // If no session from cookie, try to get it from the Authorization header\n        let user = session?.user;\n        if (!user) {\n            const authHeader = req.headers.authorization;\n            if (authHeader && authHeader.startsWith(\"Bearer \")) {\n                const token = authHeader.substring(7);\n                try {\n                    const { data, error } = await supabase.auth.getUser(token);\n                    if (!error && data?.user) {\n                        user = data.user;\n                        console.log(\"User found from Authorization header:\", user.email);\n                    }\n                } catch (tokenError) {\n                    console.error(\"Error verifying token:\", tokenError);\n                }\n            }\n        }\n        // If still no user, try using admin client as fallback for development\n        if (!user) {\n            // For development/testing: allow admin access with specific headers\n            const isDevMode = \"development\" === \"development\";\n            const devBypass = req.headers[\"x-dev-bypass\"] === process.env.DEV_BYPASS_SECRET;\n            const adminEmail = req.headers[\"x-admin-email\"];\n            if (isDevMode && devBypass && adminEmail) {\n                console.log(\"Using development bypass with admin email:\", adminEmail);\n                user = {\n                    email: adminEmail\n                };\n            } else {\n                console.error(\"No session or user found\");\n                return res.status(401).json({\n                    error: \"Unauthorized - No session found\"\n                });\n            }\n        }\n        console.log(\"Authenticated user:\", user.email);\n        try {\n            // Check if award tables exist before proceeding\n            try {\n                // Try to query the award_settings table\n                const { data: settingsData, error: settingsCheckError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_settings\").select(\"id\").limit(1);\n                // If we get a specific error about the table not existing, return a specific response\n                if (settingsCheckError && (settingsCheckError.code === \"42P01\" || settingsCheckError.message.includes(\"relation\") || settingsCheckError.message.includes(\"does not exist\"))) {\n                    console.log(\"Award tables do not exist yet\");\n                    return res.status(503).json({\n                        error: \"Award system database tables are not yet set up\",\n                        setupRequired: true\n                    });\n                }\n            } catch (checkError) {\n                console.error(\"Error checking if award tables exist:\", checkError);\n                return res.status(503).json({\n                    error: \"Award system database tables are not yet set up\",\n                    setupRequired: true\n                });\n            }\n            if (req.method === \"GET\") {\n                // Get current award settings to get the active year\n                const { data: settings, error: settingsError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_settings\").select(\"active_year, current_phase\").single();\n                if (settingsError) {\n                    console.error(\"Error fetching award settings:\", settingsError);\n                    return res.status(500).json({\n                        error: \"Failed to fetch award settings\"\n                    });\n                }\n                // Check for category ID in query params\n                const { categoryId, status } = req.query;\n                let nominations;\n                if (categoryId) {\n                    // Get nominations for a specific category\n                    const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_nominations\").select(`\r\n              *,\r\n              category:award_categories(name, description)\r\n            `).eq(\"category_id\", categoryId).eq(\"award_year\", settings.active_year).order(\"created_at\", {\n                        ascending: false\n                    });\n                    if (error) {\n                        console.error(\"Error fetching category nominations:\", error);\n                        return res.status(500).json({\n                            error: \"Failed to fetch nominations\"\n                        });\n                    }\n                    nominations = data;\n                } else {\n                    // Check if user is an admin for getting all nominations\n                    const { data: adminData } = await supabase.from(\"admin_list\").select(\"role\").eq(\"email\", user.email).maybeSingle();\n                    if (!adminData || ![\n                        \"admin\",\n                        \"super_admin\"\n                    ].includes(adminData.role)) {\n                        return res.status(403).json({\n                            error: \"Forbidden - Admin access required to view all nominations\"\n                        });\n                    }\n                    // Get all nominations for admins\n                    const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_nominations\").select(`\r\n              *,\r\n              category:award_categories(name, description)\r\n            `).eq(\"award_year\", settings.active_year).order(\"created_at\", {\n                        ascending: false\n                    });\n                    if (error) {\n                        console.error(\"Error fetching all nominations:\", error);\n                        return res.status(500).json({\n                            error: \"Failed to fetch nominations\"\n                        });\n                    }\n                    nominations = data;\n                }\n                return res.status(200).json(nominations);\n            } else if (req.method === \"POST\") {\n                // Create a new nomination\n                const { category_id, nominee_email, reason } = req.body;\n                // Validate required fields\n                if (!category_id) {\n                    return res.status(400).json({\n                        error: \"Category ID is required\"\n                    });\n                }\n                if (!nominee_email) {\n                    return res.status(400).json({\n                        error: \"Nominee email is required\"\n                    });\n                }\n                if (!reason || reason.trim().length < 10) {\n                    return res.status(400).json({\n                        error: \"A detailed reason (at least 10 characters) is required\"\n                    });\n                }\n                // Get current award settings\n                const { data: settings, error: settingsError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_settings\").select(\"active_year, current_phase\").single();\n                if (settingsError) {\n                    console.error(\"Error fetching award settings:\", settingsError);\n                    return res.status(500).json({\n                        error: \"Failed to fetch award settings\"\n                    });\n                }\n                // Check if nominations are open\n                if (settings.current_phase !== \"nomination\") {\n                    return res.status(403).json({\n                        error: \"Nominations are currently closed\"\n                    });\n                }\n                // Check if category exists\n                const { data: categoryData, error: categoryError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_categories\").select(\"id\").eq(\"id\", category_id).single();\n                if (categoryError || !categoryData) {\n                    return res.status(400).json({\n                        error: \"Invalid category\"\n                    });\n                }\n                // Check if user has already nominated for this category\n                const { data: existingNomination, error: existingError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_nominations\").select(\"id\").eq(\"nominator_email\", user.email).eq(\"category_id\", category_id).eq(\"award_year\", settings.active_year).single();\n                if (existingNomination) {\n                    return res.status(400).json({\n                        error: \"You have already made a nomination for this category\"\n                    });\n                }\n                // Create the nomination\n                const nomination = {\n                    category_id,\n                    nominee_email,\n                    reason,\n                    nominator_email: user.email,\n                    status: \"pending\",\n                    award_year: settings.active_year,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                };\n                const { data: newNomination, error: createError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_nominations\").insert(nomination).select().single();\n                if (createError) {\n                    console.error(\"Error creating nomination:\", createError);\n                    return res.status(500).json({\n                        error: \"Failed to create nomination\"\n                    });\n                }\n                return res.status(201).json(newNomination);\n            } else if (req.method === \"PATCH\") {\n                // Update nomination status (admin only)\n                const { nominationId, status } = req.body;\n                // Check if user is an admin\n                const { data: adminData } = await supabase.from(\"admin_list\").select(\"role\").eq(\"email\", user.email).maybeSingle();\n                if (!adminData || ![\n                    \"admin\",\n                    \"super_admin\"\n                ].includes(adminData.role)) {\n                    return res.status(403).json({\n                        error: \"Forbidden - Admin access required to update nomination status\"\n                    });\n                }\n                // Update nomination status\n                const { data: updatedNomination, error: updateError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabaseAdmin.from(\"award_nominations\").update({\n                    status,\n                    updated_at: new Date().toISOString()\n                }).eq(\"id\", nominationId).select().single();\n                if (updateError) {\n                    console.error(\"Error updating nomination:\", updateError);\n                    return res.status(500).json({\n                        error: \"Failed to update nomination\"\n                    });\n                }\n                return res.status(200).json(updatedNomination);\n            } else {\n                return res.status(405).json({\n                    error: \"Method not allowed\"\n                });\n            }\n        } catch (error) {\n            console.error(\"Error in nominations API:\", error);\n            return res.status(500).json({\n                error: error.message || \"Internal server error\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error in authentication:\", error);\n        return res.status(500).json({\n            error: error.message || \"Internal server error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/awards/nominations.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fnominations&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Cnominations.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();