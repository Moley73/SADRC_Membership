"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/awards/categories";
exports.ids = ["pages/api/awards/categories"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fcategories&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Ccategories.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fcategories&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Ccategories.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_awards_categories_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\awards\\categories.js */ \"(api)/./pages/api/awards/categories.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_awards_categories_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_awards_categories_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/awards/categories\",\n        pathname: \"/api/awards/categories\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_awards_categories_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmF3YXJkcyUyRmNhdGVnb3JpZXMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2F3YXJkcyU1Q2NhdGVnb3JpZXMuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDZ0U7QUFDaEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDREQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw0REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWRyYy1tZW1iZXJzaGlwLWFwcC8/N2FhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGF3YXJkc1xcXFxjYXRlZ29yaWVzLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXdhcmRzL2NhdGVnb3JpZXNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hd2FyZHMvY2F0ZWdvcmllc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fcategories&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Ccategories.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/awardsService.js":
/*!******************************!*\
  !*** ./lib/awardsService.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AwardsService: () => (/* binding */ AwardsService),\n/* harmony export */   createStoredProcedures: () => (/* binding */ createStoredProcedures),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\n// Create a Supabase client with the service role key for admin operations\n// This bypasses RLS policies and should only be used server-side\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://wylflyzcsmkckzjdvsqc.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY);\n/**\n * Awards System Service\n * Handles all operations related to the awards system\n */ const AwardsService = {\n    /**\n   * Get the current settings for the awards system\n   */ getSettings: async ()=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_settings\").select(\"*\").single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching award settings:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Update the awards system settings\n   * @param {Object} settings - The settings to update\n   */ updateSettings: async (settings)=>{\n        try {\n            // Create a sanitized copy of the settings object\n            const sanitizedSettings = {\n                ...settings\n            };\n            // Validate and format date fields\n            const dateFields = [\n                \"nomination_start_date\",\n                \"nomination_end_date\",\n                \"voting_start_date\",\n                \"voting_end_date\"\n            ];\n            for (const field of dateFields){\n                if (sanitizedSettings[field]) {\n                    try {\n                        // Ensure date is in valid format\n                        const date = new Date(sanitizedSettings[field]);\n                        if (isNaN(date.getTime())) {\n                            throw new Error(`Invalid date format for ${field}`);\n                        }\n                        // Keep the ISO string format\n                        sanitizedSettings[field] = date.toISOString();\n                    } catch (err) {\n                        console.error(`Error formatting ${field}:`, err);\n                        throw new Error(`Invalid date format for ${field}: ${err.message}`);\n                    }\n                }\n            }\n            // Ensure active_year is an integer\n            if (sanitizedSettings.active_year) {\n                sanitizedSettings.active_year = parseInt(sanitizedSettings.active_year, 10);\n                if (isNaN(sanitizedSettings.active_year)) {\n                    throw new Error(\"Active year must be a valid number\");\n                }\n            }\n            console.log(\"Updating award settings with sanitized data:\", JSON.stringify(sanitizedSettings, null, 2));\n            const { data, error } = await supabaseAdmin.from(\"award_settings\").update(sanitizedSettings).eq(\"id\", sanitizedSettings.id).select().single();\n            if (error) {\n                console.error(\"Supabase error updating settings:\", error);\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error updating award settings:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Change the current phase of the awards system\n   * @param {string} phase - The new phase (inactive, nomination, voting, completed)\n   * @param {string} settingsId - The ID of the settings record\n   */ changePhase: async (phase, settingsId)=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_settings\").update({\n                current_phase: phase,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", settingsId).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error changing award phase:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get all award categories\n   */ getCategories: async ()=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_categories\").select(\"*\").order(\"name\");\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching award categories:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Create a nomination\n   * @param {Object} nomination - The nomination details\n   */ createNomination: async (nomination)=>{\n        try {\n            // Get current settings to ensure we're in nomination phase\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"*\").single();\n            if (settingsError) throw settingsError;\n            if (settings.current_phase !== \"nomination\") {\n                throw new Error(\"Nominations are not currently open\");\n            }\n            // Create the nomination\n            const { data, error } = await supabaseAdmin.from(\"award_nominations\").insert({\n                ...nomination,\n                status: \"pending\",\n                award_year: settings.active_year\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error creating nomination:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get nominations for a specific category\n   * @param {string} categoryId - The category ID\n   * @param {string} status - Filter by status (optional)\n   */ getNominations: async (categoryId, status = null)=>{\n        try {\n            let query = supabaseAdmin.from(\"award_nominations\").select(`\n          *,\n          category:award_categories(name, description)\n        `).eq(\"category_id\", categoryId);\n            // Add status filter if provided\n            if (status) {\n                query = query.eq(\"status\", status);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching nominations:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get all nominations\n   * @param {string} status - Filter by status (optional)\n   */ getAllNominations: async (status = null)=>{\n        try {\n            let query = supabaseAdmin.from(\"award_nominations\").select(`\n          *,\n          category:award_categories(name, description)\n        `);\n            // Add status filter if provided\n            if (status) {\n                query = query.eq(\"status\", status);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching all nominations:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Update a nomination's status\n   * @param {string} nominationId - The nomination ID\n   * @param {string} status - The new status (pending, approved, rejected)\n   */ updateNominationStatus: async (nominationId, status)=>{\n        try {\n            const { data, error } = await supabaseAdmin.from(\"award_nominations\").update({\n                status,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", nominationId).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error updating nomination status:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Cast a vote for a nomination\n   * @param {string} nominationId - The nomination ID\n   * @param {string} voterEmail - The voter's email\n   */ castVote: async (nominationId, voterEmail)=>{\n        try {\n            // Get current settings to ensure we're in voting phase\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"*\").single();\n            if (settingsError) throw settingsError;\n            if (settings.current_phase !== \"voting\") {\n                throw new Error(\"Voting is not currently open\");\n            }\n            // Get the nomination to check if it's approved\n            const { data: nomination, error: nominationError } = await supabaseAdmin.from(\"award_nominations\").select(\"*\").eq(\"id\", nominationId).single();\n            if (nominationError) throw nominationError;\n            if (nomination.status !== \"approved\") {\n                throw new Error(\"Cannot vote for a nomination that is not approved\");\n            }\n            // Check if user has already voted in this category\n            const { data: existingVotes, error: existingVotesError } = await supabaseAdmin.from(\"award_votes\").select(\"id\").eq(\"voter_email\", voterEmail).eq(\"award_year\", settings.active_year);\n            if (existingVotesError) throw existingVotesError;\n            // If user has already voted in this category, throw an error\n            if (existingVotes.length > 0) {\n                const { data: existingNominations, error: existingNominationsError } = await supabaseAdmin.from(\"award_nominations\").select(\"category_id\").in(\"id\", existingVotes.map((vote)=>vote.nomination_id));\n                if (existingNominationsError) throw existingNominationsError;\n                if (existingNominations.some((nom)=>nom.category_id === nomination.category_id)) {\n                    throw new Error(\"You have already voted in this category\");\n                }\n            }\n            // Cast the vote\n            const { data, error } = await supabaseAdmin.from(\"award_votes\").insert({\n                nomination_id: nominationId,\n                voter_email: voterEmail,\n                award_year: settings.active_year\n            }).select().single();\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error casting vote:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get vote counts for nominations\n   * @param {string} categoryId - The category ID (optional)\n   */ getVoteCounts: async (categoryId = null)=>{\n        try {\n            // Get the current settings to get the active year\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"active_year\").single();\n            if (settingsError) throw settingsError;\n            // Build the query to get vote counts\n            let query = supabaseAdmin.rpc(\"get_vote_counts\", {\n                active_year: settings.active_year\n            });\n            if (categoryId) {\n                query = query.eq(\"category_id\", categoryId);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error getting vote counts:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Get voting statistics\n   */ getVotingStats: async ()=>{\n        try {\n            // Get the current settings to get the active year\n            const { data: settings, error: settingsError } = await supabaseAdmin.from(\"award_settings\").select(\"active_year\").single();\n            if (settingsError) throw settingsError;\n            // Get total votes per category\n            const { data, error } = await supabaseAdmin.rpc(\"get_voting_stats\", {\n                active_year: settings.active_year\n            });\n            if (error) throw error;\n            return data;\n        } catch (error) {\n            console.error(\"Error getting voting stats:\", error);\n            throw error;\n        }\n    }\n};\n// Create stored procedures for vote counting and stats\nconst createStoredProcedures = async ()=>{\n    try {\n        // Create function to get vote counts\n        await supabaseAdmin.rpc(\"create_get_vote_counts_function\", {\n            sql: `\n        CREATE OR REPLACE FUNCTION get_vote_counts(active_year INTEGER)\n        RETURNS TABLE (\n          nomination_id UUID,\n          category_id UUID,\n          nominee_email TEXT,\n          category_name TEXT,\n          vote_count BIGINT\n        )\n        LANGUAGE SQL\n        AS $$\n          SELECT \n            n.id AS nomination_id,\n            n.category_id,\n            n.nominee_email,\n            c.name AS category_name,\n            COUNT(v.id) AS vote_count\n          FROM award_nominations n\n          JOIN award_categories c ON n.category_id = c.id\n          LEFT JOIN award_votes v ON n.id = v.nomination_id\n          WHERE n.status = 'approved'\n          AND n.award_year = active_year\n          GROUP BY n.id, n.category_id, n.nominee_email, c.name\n          ORDER BY c.name, vote_count DESC;\n        $$;\n      `\n        });\n        // Create function to get voting stats\n        await supabaseAdmin.rpc(\"create_get_voting_stats_function\", {\n            sql: `\n        CREATE OR REPLACE FUNCTION get_voting_stats(active_year INTEGER)\n        RETURNS TABLE (\n          category_id UUID,\n          category_name TEXT,\n          total_votes BIGINT,\n          total_nominations BIGINT,\n          approved_nominations BIGINT\n        )\n        LANGUAGE SQL\n        AS $$\n          SELECT \n            c.id AS category_id,\n            c.name AS category_name,\n            COUNT(v.id) AS total_votes,\n            COUNT(DISTINCT n.id) AS total_nominations,\n            COUNT(DISTINCT CASE WHEN n.status = 'approved' THEN n.id END) AS approved_nominations\n          FROM award_categories c\n          LEFT JOIN award_nominations n ON c.id = n.category_id AND n.award_year = active_year\n          LEFT JOIN award_votes v ON n.id = v.nomination_id AND v.award_year = active_year\n          GROUP BY c.id, c.name\n          ORDER BY c.name;\n        $$;\n      `\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error creating stored procedures:\", error);\n        return false;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AwardsService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/awardsService.js\n");

/***/ }),

/***/ "(api)/./pages/api/awards/categories.js":
/*!****************************************!*\
  !*** ./pages/api/awards/categories.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_awardsService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/awardsService */ \"(api)/./lib/awardsService.js\");\n\nasync function handler(req, res) {\n    try {\n        if (req.method === \"GET\") {\n            // Get all award categories (publicly readable)\n            const categories = await _lib_awardsService__WEBPACK_IMPORTED_MODULE_0__.AwardsService.getCategories();\n            return res.status(200).json(categories);\n        } else {\n            return res.status(405).json({\n                error: \"Method not allowed\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error in categories API:\", error);\n        return res.status(500).json({\n            error: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXdhcmRzL2NhdGVnb3JpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkQ7QUFFNUMsZUFBZUMsUUFBUUMsR0FBRyxFQUFFQyxHQUFHO0lBQzVDLElBQUk7UUFDRixJQUFJRCxJQUFJRSxNQUFNLEtBQUssT0FBTztZQUN4QiwrQ0FBK0M7WUFDL0MsTUFBTUMsYUFBYSxNQUFNTCw2REFBYUEsQ0FBQ00sYUFBYTtZQUNwRCxPQUFPSCxJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDSDtRQUM5QixPQUFPO1lBQ0wsT0FBT0YsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFxQjtRQUM1RDtJQUNGLEVBQUUsT0FBT0EsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsNEJBQTRCQTtRQUMxQyxPQUFPTixJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLE9BQU9BLE1BQU1FLE9BQU87UUFBQztJQUNyRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FkcmMtbWVtYmVyc2hpcC1hcHAvLi9wYWdlcy9hcGkvYXdhcmRzL2NhdGVnb3JpZXMuanM/Yzk1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBd2FyZHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vbGliL2F3YXJkc1NlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcclxuICAgICAgLy8gR2V0IGFsbCBhd2FyZCBjYXRlZ29yaWVzIChwdWJsaWNseSByZWFkYWJsZSlcclxuICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IGF3YWl0IEF3YXJkc1NlcnZpY2UuZ2V0Q2F0ZWdvcmllcygpO1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oY2F0ZWdvcmllcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGNhdGVnb3JpZXMgQVBJOicsIGVycm9yKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiQXdhcmRzU2VydmljZSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJjYXRlZ29yaWVzIiwiZ2V0Q2F0ZWdvcmllcyIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/awards/categories.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fawards%2Fcategories&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cawards%5Ccategories.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();