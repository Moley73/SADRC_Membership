"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/supabaseClient.js":
/*!*******************************!*\
  !*** ./lib/supabaseClient.js ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debugAuthState: function() { return /* binding */ debugAuthState; },\n/* harmony export */   getAuthToken: function() { return /* binding */ getAuthToken; },\n/* harmony export */   handleAuthError: function() { return /* binding */ handleAuthError; },\n/* harmony export */   isAdmin: function() { return /* binding */ isAdmin; },\n/* harmony export */   isLoggedIn: function() { return /* binding */ isLoggedIn; },\n/* harmony export */   refreshSession: function() { return /* binding */ refreshSession; },\n/* harmony export */   safeGetSession: function() { return /* binding */ safeGetSession; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; },\n/* harmony export */   supabaseAdmin: function() { return /* binding */ supabaseAdmin; },\n/* harmony export */   testTableAccess: function() { return /* binding */ testTableAccess; },\n/* harmony export */   withServiceRole: function() { return /* binding */ withServiceRole; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\nconst supabaseUrl = \"https://wylflyzcsmkckzjdvsqc.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind5bGZseXpjc21rY2t6amR2c3FjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MTMzNDgsImV4cCI6MjA2MDI4OTM0OH0.9y6kBuwd1emWuseV6tv9BgtmSgB8a9UUb15n0n6UL0w\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n// Create a standard client with the user's session\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        persistSession: true,\n        autoRefreshToken: true,\n        detectSessionInUrl: true,\n        storageKey: \"sadrc-membership-auth\",\n        storage: {\n            getItem: (key)=>{\n                if (false) {}\n                return JSON.parse(window.localStorage.getItem(key));\n            },\n            setItem: (key, value)=>{\n                if (true) {\n                    window.localStorage.setItem(key, JSON.stringify(value));\n                }\n            },\n            removeItem: (key)=>{\n                if (true) {\n                    window.localStorage.removeItem(key);\n                }\n            }\n        }\n    }\n});\n// Create a service role client for admin operations\nconst supabaseAdmin = supabaseServiceKey ? (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n}) : null;\n// Helper function to get the current session token\nconst getAuthToken = async ()=>{\n    try {\n        var _data_session;\n        const { data } = await supabase.auth.getSession();\n        return (data === null || data === void 0 ? void 0 : (_data_session = data.session) === null || _data_session === void 0 ? void 0 : _data_session.access_token) || null;\n    } catch (error) {\n        console.error(\"Error getting auth token:\", error);\n        return null;\n    }\n};\n// Helper function to check if user is logged in\nconst isLoggedIn = async ()=>{\n    try {\n        const { data } = await supabase.auth.getSession();\n        return !!(data === null || data === void 0 ? void 0 : data.session);\n    } catch (error) {\n        console.error(\"Error checking login status:\", error);\n        return false;\n    }\n};\n// Helper function to check if user is admin\nconst isAdmin = async ()=>{\n    try {\n        const { data: sessionData } = await supabase.auth.getSession();\n        if (!(sessionData === null || sessionData === void 0 ? void 0 : sessionData.session)) return false;\n        const { data } = await supabase.from(\"admin_list\").select(\"role\").eq(\"email\", sessionData.session.user.email).maybeSingle();\n        return !!data;\n    } catch (error) {\n        console.error(\"Error checking admin status:\", error);\n        return false;\n    }\n};\n// Force a session refresh\nconst refreshSession = async ()=>{\n    try {\n        const { data, error } = await supabase.auth.refreshSession();\n        if (error) throw error;\n        return data === null || data === void 0 ? void 0 : data.session;\n    } catch (error) {\n        console.error(\"Error refreshing session:\", error);\n        return null;\n    }\n};\n// Helper function to safely use the admin client\nconst withServiceRole = async (operation)=>{\n    if (!supabaseAdmin) {\n        console.error(\"Service role key not available. Falling back to regular client.\");\n        return operation(supabase);\n    }\n    try {\n        return await operation(supabaseAdmin);\n    } catch (error) {\n        console.error(\"Error using service role client:\", error);\n        // Fallback to regular client if service role fails\n        return operation(supabase);\n    }\n};\n// Add a custom error handler for auth errors\nconst handleAuthError = (error)=>{\n    if ((error === null || error === void 0 ? void 0 : error.name) === \"AuthSessionMissingError\") {\n        console.log(\"Session missing, redirecting to login\");\n        // Clear any local storage items that might be causing issues\n        if (true) {\n            localStorage.removeItem(\"sadrc-membership-auth\");\n            localStorage.removeItem(\"supabase.auth.token\");\n        }\n        return true; // Indicates this was an auth error that was handled\n    }\n    return false; // Not handled\n};\n// Helper to safely get the current session\nconst safeGetSession = async ()=>{\n    try {\n        var _data_session;\n        const { data, error } = await supabase.auth.getSession();\n        if (error) {\n            handleAuthError(error);\n            return {\n                session: null,\n                user: null\n            };\n        }\n        return {\n            session: (data === null || data === void 0 ? void 0 : data.session) || null,\n            user: (data === null || data === void 0 ? void 0 : (_data_session = data.session) === null || _data_session === void 0 ? void 0 : _data_session.user) || null\n        };\n    } catch (err) {\n        console.error(\"Unexpected error getting session:\", err);\n        handleAuthError(err);\n        return {\n            session: null,\n            user: null\n        };\n    }\n};\n// Debug function to log auth state and session details\nconst debugAuthState = async ()=>{\n    try {\n        var _sessionData_session, _userData_user, _userData_user1;\n        const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\n        const { data: userData, error: userError } = await supabase.auth.getUser();\n        console.log(\"====== AUTH DEBUG INFO ======\");\n        console.log(\"Session exists:\", !!(sessionData === null || sessionData === void 0 ? void 0 : sessionData.session));\n        console.log(\"JWT exists:\", !!(sessionData === null || sessionData === void 0 ? void 0 : (_sessionData_session = sessionData.session) === null || _sessionData_session === void 0 ? void 0 : _sessionData_session.access_token));\n        console.log(\"User exists:\", !!(userData === null || userData === void 0 ? void 0 : userData.user));\n        if (userData === null || userData === void 0 ? void 0 : userData.user) {\n            console.log(\"User email:\", userData.user.email);\n            console.log(\"User ID:\", userData.user.id);\n        }\n        if (sessionError) {\n            console.error(\"Session error:\", sessionError);\n        }\n        if (userError) {\n            console.error(\"User error:\", userError);\n        }\n        return {\n            hasSession: !!(sessionData === null || sessionData === void 0 ? void 0 : sessionData.session),\n            hasUser: !!(userData === null || userData === void 0 ? void 0 : userData.user),\n            userEmail: userData === null || userData === void 0 ? void 0 : (_userData_user = userData.user) === null || _userData_user === void 0 ? void 0 : _userData_user.email,\n            userId: userData === null || userData === void 0 ? void 0 : (_userData_user1 = userData.user) === null || _userData_user1 === void 0 ? void 0 : _userData_user1.id,\n            sessionError,\n            userError\n        };\n    } catch (err) {\n        console.error(\"Error in debugAuthState:\", err);\n        return {\n            hasSession: false,\n            hasUser: false,\n            error: err.message\n        };\n    }\n};\n// Debug function to test RLS permissions on specific tables\nconst testTableAccess = async function(tableName) {\n    let email = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    try {\n        const query = supabase.from(tableName).select(\"*\");\n        // If email provided, try to filter by it\n        if (email) {\n            query.eq(\"email\", email);\n        }\n        // Limit to just one row for testing\n        query.limit(1);\n        // Execute with timeout\n        const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Query to \".concat(tableName, \" timed out\"))), 5000));\n        const { data, error } = await Promise.race([\n            query,\n            timeoutPromise\n        ]);\n        console.log(\"==== \".concat(tableName.toUpperCase(), \" ACCESS TEST ====\"));\n        console.log(\"Query successful:\", !error);\n        console.log(\"Data found:\", !!data && data.length > 0);\n        if (error) {\n            console.error(\"Error accessing \".concat(tableName, \":\"), error);\n        }\n        return {\n            success: !error,\n            hasData: !!data && data.length > 0,\n            data: data,\n            error: error\n        };\n    } catch (err) {\n        console.error(\"Error testing access to \".concat(tableName, \":\"), err);\n        return {\n            success: false,\n            error: err.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/supabaseClient.js\n"));

/***/ })

});